import type { VariablesWithTime } from '@openmeteo/sdk/variables-with-time';
export type HourlyVariable = 'apparent_temperature' | 'cape' | 'cloud_cover' | 'cloud_cover_high' | 'cloud_cover_low' | 'cloud_cover_mid' | 'dew_point_2m' | 'diffuse_radiation' | 'diffuse_radiation_instant' | 'direct_normal_irradiance' | 'direct_normal_irradiance_instant' | 'direct_radiation' | 'direct_radiation_instant' | 'et0_fao_evapotranspiration' | 'evapotranspiration' | 'freezing_level_height' | 'global_tilted_irradiance' | 'global_tilted_irradiance_instant' | 'is_day' | 'lightning_potential' | 'precipitation' | 'pressure_msl' | 'rain' | 'relative_humidity_2m' | 'shortwave_radiation' | 'shortwave_radiation_instant' | 'showers' | 'snow_depth' | 'snowfall' | 'snowfall_height' | 'soil_moisture_0_to_1cm' | 'soil_moisture_1_to_3cm' | 'soil_moisture_27_to_81cm' | 'soil_moisture_3_to_9cm' | 'soil_moisture_9_to_27cm' | 'soil_temperature_0cm' | 'soil_temperature_18cm' | 'soil_temperature_54cm' | 'soil_temperature_6cm' | 'sunshine_duration' | 'surface_pressure' | 'temperature_120m' | 'temperature_180m' | 'temperature_2m' | 'temperature_80m' | 'terrestrial_radiation' | 'terrestrial_radiation_instant' | 'updraft' | 'vapour_pressure_deficit' | 'weather_code' | 'wind_direction_10m' | 'wind_direction_120m' | 'wind_direction_180m' | 'wind_direction_80m' | 'wind_gusts_10m' | 'wind_speed_10m' | 'wind_speed_120m' | 'wind_speed_180m' | 'wind_speed_80m';
export type DailyVariable = 'apparent_temperature_max' | 'apparent_temperature_min' | 'daylight_duration' | 'et0_fao_evapotranspiration' | 'precipitation_hours' | 'precipitation_probability_max' | 'precipitation_sum' | 'rain_sum' | 'shortwave_radiation_sum' | 'showers_sum' | 'snowfall_sum' | 'sunrise' | 'sunset' | 'sunshine_duration' | 'temperature_2m_max' | 'temperature_2m_min' | 'weather_code' | 'wind_direction_10m_dominant' | 'wind_gusts_10m_max' | 'wind_speed_10m_max';
export type CurrentVariable = 'apparent_temperature' | 'cloud_cover' | 'is_day' | 'precipitation' | 'pressure_msl' | 'rain' | 'relative_humidity_2m' | 'showers' | 'snowfall' | 'surface_pressure' | 'temperature_2m' | 'weather_code' | 'wind_direction_10m' | 'wind_gusts_10m' | 'wind_speed_10m';
export interface WeatherDataParams<H extends HourlyVariable = HourlyVariable, D extends DailyVariable = DailyVariable, C extends CurrentVariable = CurrentVariable> {
    latitude: number;
    longitude: number;
    elevation?: number;
    timezone?: string;
    forecast_days?: number;
    past_days?: number;
    hourly?: readonly H[];
    daily?: readonly D[];
    current?: readonly C[];
    temperature_unit?: 'celsius' | 'fahrenheit';
    wind_speed_unit?: 'kmh' | 'ms' | 'mph' | 'kn';
    precipitation_unit?: 'mm' | 'inch';
    cell_selection?: 'land' | 'sea' | 'nearest';
}
export type RecordWithTime<T extends string, V> = Record<T | 'time', V>;
export type TimeSeries<T extends string> = RecordWithTime<T, number[]>;
export type Current<T extends string> = RecordWithTime<T, number>;
export type Optional<T> = [T] extends [never] ? never : T;
export interface WeatherData<H extends HourlyVariable, D extends DailyVariable, C extends CurrentVariable> {
    latitude: number;
    longitude: number;
    elevation: number;
    timezone: string;
    timezone_abbreviation: string;
    utc_offset_seconds: number;
    hourly: Optional<TimeSeries<H>>;
    daily: Optional<TimeSeries<D>>;
    current: Optional<Current<C>>;
}
export declare class RetryableWeatherDataError extends Error {
    constructor(msg: string, cause?: unknown);
}
export declare const fetchWeatherData: <T extends WeatherDataParams<HourlyVariable, DailyVariable, CurrentVariable>>(params: T, api?: string) => Promise<WeatherData<T extends {
    hourly?: readonly (infer H extends HourlyVariable)[] | undefined;
} ? H : never, T extends {
    daily?: readonly (infer D extends DailyVariable)[] | undefined;
} ? D : never, T extends {
    current?: readonly (infer C extends CurrentVariable)[] | undefined;
} ? C : never>>;
export declare const _fetch: <T extends WeatherDataParams<HourlyVariable, DailyVariable, CurrentVariable>>(params: T, api: string) => Promise<Uint8Array>;
export declare const _parse: <H extends HourlyVariable, D extends DailyVariable, C extends CurrentVariable>(buffer: Uint8Array, params: WeatherDataParams<H, D, C>) => WeatherData<H, D, C>;
export declare const _parseTimeSeries: <T extends string>(ts: VariablesWithTime, params: readonly T[]) => Optional<TimeSeries<T>>;
//# sourceMappingURL=main.d.ts.map